// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Theater.Data;

namespace Theater.Data.Migrations
{
    [DbContext(typeof(AppDBContent))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Theater.Areas.Identity.ApplicationIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FIO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Theater.Data.Models.Actor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Actor");
                });

            modelBuilder.Entity("Theater.Data.Models.ActorsList", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("perfListId")
                        .HasColumnType("int");

                    b.Property<int?>("performanceActorid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("performanceActorid");

                    b.ToTable("ActorsList");
                });

            modelBuilder.Entity("Theater.Data.Models.Director", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("directorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Director");
                });

            modelBuilder.Entity("Theater.Data.Models.Genre", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("genreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("Theater.Data.Models.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("code")
                        .HasColumnType("int");

                    b.Property<int>("discount")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("orderTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Theater.Data.Models.PerfScene", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("sceneid")
                        .HasColumnType("int");

                    b.Property<int?>("theatreid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("sceneid");

                    b.HasIndex("theatreid");

                    b.ToTable("PerfScene");
                });

            modelBuilder.Entity("Theater.Data.Models.Performance", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("actorsListid")
                        .HasColumnType("int");

                    b.Property<int>("ageRestriction")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("directorid")
                        .HasColumnType("int");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<int?>("genreid")
                        .HasColumnType("int");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("intermission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("perfSceneid")
                        .HasColumnType("int");

                    b.Property<string>("performanceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("actorsListid");

                    b.HasIndex("directorid");

                    b.HasIndex("genreid");

                    b.HasIndex("perfSceneid");

                    b.ToTable("Performance");
                });

            modelBuilder.Entity("Theater.Data.Models.PerformanceActor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("actorid")
                        .HasColumnType("int");

                    b.Property<int?>("roleid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("actorid");

                    b.HasIndex("roleid");

                    b.ToTable("PerformanceActor");
                });

            modelBuilder.Entity("Theater.Data.Models.Place", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("col")
                        .HasColumnType("int");

                    b.Property<int>("row")
                        .HasColumnType("int");

                    b.Property<int?>("scenePartId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("scenePartId");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("Theater.Data.Models.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Theater.Data.Models.Scene", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sceneName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Scene");
                });

            modelBuilder.Entity("Theater.Data.Models.ScenePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sceneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScenePart");
                });

            modelBuilder.Entity("Theater.Data.Models.Schedule", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Performanceid")
                        .HasColumnType("int");

                    b.Property<DateTime>("performanceTime")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("Performanceid");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Theater.Data.Models.ShopCart", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SCId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ShopCart");
                });

            modelBuilder.Entity("Theater.Data.Models.ShopCartItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Orderid")
                        .HasColumnType("int");

                    b.Property<string>("ShopCId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShopCartid")
                        .HasColumnType("int");

                    b.Property<int?>("Statusid")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int?>("ticketid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Orderid");

                    b.HasIndex("ShopCartid");

                    b.HasIndex("Statusid");

                    b.HasIndex("ticketid");

                    b.ToTable("ShopCartItem");
                });

            modelBuilder.Entity("Theater.Data.Models.Theatre", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("theatreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Theatre");
                });

            modelBuilder.Entity("Theater.Data.Models.Ticket", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("placeid")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("scheduleId")
                        .HasColumnType("int");

                    b.Property<int?>("statusid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("placeid");

                    b.HasIndex("statusid");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Theater.Data.Models.TicketStatus", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ticketStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TicketStatus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Theater.Areas.Identity.ApplicationIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Theater.Areas.Identity.ApplicationIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Theater.Areas.Identity.ApplicationIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Theater.Areas.Identity.ApplicationIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Theater.Data.Models.ActorsList", b =>
                {
                    b.HasOne("Theater.Data.Models.PerformanceActor", "performanceActor")
                        .WithMany()
                        .HasForeignKey("performanceActorid");

                    b.Navigation("performanceActor");
                });

            modelBuilder.Entity("Theater.Data.Models.PerfScene", b =>
                {
                    b.HasOne("Theater.Data.Models.Scene", "scene")
                        .WithMany()
                        .HasForeignKey("sceneid");

                    b.HasOne("Theater.Data.Models.Theatre", "theatre")
                        .WithMany()
                        .HasForeignKey("theatreid");

                    b.Navigation("scene");

                    b.Navigation("theatre");
                });

            modelBuilder.Entity("Theater.Data.Models.Performance", b =>
                {
                    b.HasOne("Theater.Data.Models.ActorsList", "actorsList")
                        .WithMany()
                        .HasForeignKey("actorsListid");

                    b.HasOne("Theater.Data.Models.Director", "director")
                        .WithMany()
                        .HasForeignKey("directorid");

                    b.HasOne("Theater.Data.Models.Genre", "genre")
                        .WithMany()
                        .HasForeignKey("genreid");

                    b.HasOne("Theater.Data.Models.PerfScene", "perfScene")
                        .WithMany()
                        .HasForeignKey("perfSceneid");

                    b.Navigation("actorsList");

                    b.Navigation("director");

                    b.Navigation("genre");

                    b.Navigation("perfScene");
                });

            modelBuilder.Entity("Theater.Data.Models.PerformanceActor", b =>
                {
                    b.HasOne("Theater.Data.Models.Actor", "actor")
                        .WithMany()
                        .HasForeignKey("actorid");

                    b.HasOne("Theater.Data.Models.Role", "role")
                        .WithMany()
                        .HasForeignKey("roleid");

                    b.Navigation("actor");

                    b.Navigation("role");
                });

            modelBuilder.Entity("Theater.Data.Models.Place", b =>
                {
                    b.HasOne("Theater.Data.Models.ScenePart", "scenePart")
                        .WithMany()
                        .HasForeignKey("scenePartId");

                    b.Navigation("scenePart");
                });

            modelBuilder.Entity("Theater.Data.Models.Schedule", b =>
                {
                    b.HasOne("Theater.Data.Models.Performance", "Performance")
                        .WithMany()
                        .HasForeignKey("Performanceid");

                    b.Navigation("Performance");
                });

            modelBuilder.Entity("Theater.Data.Models.ShopCartItem", b =>
                {
                    b.HasOne("Theater.Data.Models.Order", null)
                        .WithMany("tickets")
                        .HasForeignKey("Orderid");

                    b.HasOne("Theater.Data.Models.ShopCart", null)
                        .WithMany("listShopItems")
                        .HasForeignKey("ShopCartid");

                    b.HasOne("Theater.Data.Models.TicketStatus", "Status")
                        .WithMany()
                        .HasForeignKey("Statusid");

                    b.HasOne("Theater.Data.Models.Ticket", "ticket")
                        .WithMany()
                        .HasForeignKey("ticketid");

                    b.Navigation("Status");

                    b.Navigation("ticket");
                });

            modelBuilder.Entity("Theater.Data.Models.Ticket", b =>
                {
                    b.HasOne("Theater.Data.Models.Place", "place")
                        .WithMany()
                        .HasForeignKey("placeid");

                    b.HasOne("Theater.Data.Models.TicketStatus", "status")
                        .WithMany()
                        .HasForeignKey("statusid");

                    b.Navigation("place");

                    b.Navigation("status");
                });

            modelBuilder.Entity("Theater.Data.Models.Order", b =>
                {
                    b.Navigation("tickets");
                });

            modelBuilder.Entity("Theater.Data.Models.ShopCart", b =>
                {
                    b.Navigation("listShopItems");
                });
#pragma warning restore 612, 618
        }
    }
}
